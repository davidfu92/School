/*
 * tokenizer.c
 */
#include <stdio.h>
#include <stdlib.h>
/*
 * Tokenizer type.  You need to fill in the type as part of your implementation.
 */

struct TokenizerT_ {
	char *token;
	struct TokenizerT_ *next;
};

typedef struct TokenizerT_ TokenizerT;

/*
 * TKCreate creates a new TokenizerT object for a given set of separator
 * characters (given as a string) and a token stream (given as a string).
 * 
 * TKCreate should copy the two arguments so that it is not dependent on
 * them staying immutable after returning.  (In the future, this may change
 * to increase efficiency.)
 *
 * If the function succeeds, it returns a non-NULL TokenizerT.
 * Else it returns NULL.
 *
 * You need to fill in this function as part of your implementation.
 */

TokenizerT *TKCreate(char *separators, char *ts) {
	TokenizerT *tk = malloc(sizeof(TokenizerT));
	TokenizerT *t = tk; 			//create temp
	tk->token =  calloc(100, sizeof(char));  // create 100 token word  buffer
	int word = 0;
	char *temp = separators;
	char sep = *separators;
	char input = *ts;
	if(input == '\0') {				//check if input is empty
		free(tk->token);
		free(tk);
		return NULL;
	}
	while(input != '\0') {			//loop through input
		sep = *temp;
		while(sep != '\0') {		//loop through sepeartor
			if((input == sep) && (word == 0)) {			//if seperator char and no word in token yet
				temp = separators;
				break;
			}
			else if((input == sep) && (word>0)) {		//if sepertor char and there is word means create new word
				temp = separators;
				t->token = realloc(t->token, sizeof(char)*(++word)); //reallocate size
				t->token[word] = '\0';				//end the string with \0
				word = 0;
				TokenizerT *n = malloc(sizeof(TokenizerT)); // makes new token
				t->next = n;
				t = t->next;
				t->token = calloc(100, sizeof(char)); //make new buffer
			break;
			}
			sep = *(++temp);
		}
		if(sep == '\0') {		//if input char not in separator add it to the token
			temp = separators;
			t->token[word] = input;
			word++;
		}
		input = *(++ts);
	}
	if((input == '\0') && (word != 0)) {		//check to see if last input char is valid and there is a final word
				t->token = realloc(t->token, sizeof(char)*(++word));
				t->token[word] = '\0';
	}
	t->next = NULL;			//end the token
	return tk;
}

/*
 * TKDestroy destroys a TokenizerT object.  It should free all dynamically
 * allocated memory that is part of the object being destroyed.
 *
 * You need to fill in this function as part of your implementation.
 */

void TKDestroy(TokenizerT *tk) {
	while(tk != NULL) {					//loops to token and free them
		TokenizerT *temp = tk->next;
		free(tk->token);
		free(tk);
		tk = temp;
	}
}

/*
 * TKGetNextToken returns the next token from the token stream as a
 * character string.  Space for the returned token should be dynamically
 * allocated.  The caller is responsible for freeing the space once it is
 * no longer needed.
 *
 * If the function succeeds, it returns a C string (delimited by '\0')
 * containing the token.  Else it returns 0.
 *
 * You need to fill in this function as part of your implementation.
 */

char *TKGetNextToken(TokenizerT *tk) {
	if(tk != NULL) {
		return tk->token;			//returns token
	}
	return NULL;
}

/*
 * printToken reconfigure the character string from
 * TKGetNextToken and takes the escape value and convert them
 * to their Hex value in the form 0x?? and prints them
 */
void printToken(char *output) {
	char c = *output;
	while(c != '\0') {		//checks character by character for escape character
		if(c == '\\'){
			c = *(++output);
			switch(c) {
				case 'n' : printf("[0x0a]");  
					break;
				case 'v' : printf("[0x0b]");
					break;
				case 'b' : printf("[0x08]");
					break;
				case 'r' : printf("[0x0d]");
					break;
				case 'f' : printf("[0x0c]");
					break;
				case 'a' : printf("[0x07]");
					break;
				case '"' : printf("[0x22]");
					break;
				DEFAULT : printf("%c",c);		//Default print character after / if not escape
			}
		} else {
			printf("%c", c);			// just print the character
		}
		c=*(++output);
	}
	printf("\n");					//go to next line
}
/*
 * main will have two string arguments (in argv[1] and argv[2]).
 * The first string contains the separator characters.
 * The second string contains the tokens.
 * Print out the tokens in the second string in left-to-right order.
 * Each token should be printed on a separate line.
 */

int main(int argc, char **argv) {
	if ((argv[1] == NULL) && (argv[2] == NULL)) {
		printf("Too Few Args => error\n");
		return -1;
	} else if(argv[3] != NULL){
		printf("Too Many Args => error\n");
		return -1;
	}
	TokenizerT *t = TKCreate(argv[1], argv[2]);   //creates tokenizer
	TokenizerT *tt = t;
	while(TKGetNextToken(tt) != NULL) {
		printToken(TKGetNextToken(tt));  // print out token
		tt = tt->next;
	}
	TKDestroy(t);				//free memory
  return 0;
}
